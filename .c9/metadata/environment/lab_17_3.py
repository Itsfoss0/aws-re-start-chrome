{"filter":false,"title":"lab_17_3.py","tooltip":"/lab_17_3.py","undoManager":{"mark":36,"position":36,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #3","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, cipherKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":37}],[{"start":{"row":39,"column":0},"end":{"row":39,"column":2},"action":"insert","lines":["# "],"id":38},{"start":{"row":40,"column":0},"end":{"row":40,"column":2},"action":"insert","lines":["# "]},{"start":{"row":41,"column":0},"end":{"row":41,"column":2},"action":"insert","lines":["# "]},{"start":{"row":42,"column":0},"end":{"row":42,"column":2},"action":"insert","lines":["# "]},{"start":{"row":43,"column":0},"end":{"row":43,"column":2},"action":"insert","lines":["# "]},{"start":{"row":44,"column":0},"end":{"row":44,"column":2},"action":"insert","lines":["# "]},{"start":{"row":45,"column":0},"end":{"row":45,"column":2},"action":"insert","lines":["# "]},{"start":{"row":46,"column":0},"end":{"row":46,"column":2},"action":"insert","lines":["# "]},{"start":{"row":47,"column":0},"end":{"row":47,"column":2},"action":"insert","lines":["# "]},{"start":{"row":48,"column":0},"end":{"row":48,"column":2},"action":"insert","lines":["# "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":2},"action":"insert","lines":["# "]},{"start":{"row":50,"column":0},"end":{"row":50,"column":2},"action":"insert","lines":["# "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":2},"action":"insert","lines":["# "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":2},"action":"insert","lines":["# "]}],[{"start":{"row":55,"column":0},"end":{"row":55,"column":1},"action":"insert","lines":["#"],"id":39}],[{"start":{"row":55,"column":1},"end":{"row":55,"column":2},"action":"insert","lines":[" "],"id":40}],[{"start":{"row":55,"column":26},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":41},{"start":{"row":56,"column":0},"end":{"row":56,"column":1},"action":"insert","lines":["p"]},{"start":{"row":56,"column":1},"end":{"row":56,"column":2},"action":"insert","lines":["r"]},{"start":{"row":56,"column":2},"end":{"row":56,"column":3},"action":"insert","lines":["i"]},{"start":{"row":56,"column":3},"end":{"row":56,"column":4},"action":"insert","lines":["n"]},{"start":{"row":56,"column":4},"end":{"row":56,"column":5},"action":"insert","lines":["t"]}],[{"start":{"row":56,"column":5},"end":{"row":56,"column":7},"action":"insert","lines":["()"],"id":42}],[{"start":{"row":56,"column":6},"end":{"row":56,"column":7},"action":"insert","lines":["d"],"id":43},{"start":{"row":56,"column":7},"end":{"row":56,"column":8},"action":"insert","lines":["e"]},{"start":{"row":56,"column":8},"end":{"row":56,"column":9},"action":"insert","lines":["c"]},{"start":{"row":56,"column":9},"end":{"row":56,"column":10},"action":"insert","lines":["r"]},{"start":{"row":56,"column":10},"end":{"row":56,"column":11},"action":"insert","lines":["u"]}],[{"start":{"row":56,"column":10},"end":{"row":56,"column":11},"action":"remove","lines":["u"],"id":44}],[{"start":{"row":56,"column":10},"end":{"row":56,"column":11},"action":"insert","lines":["y"],"id":45},{"start":{"row":56,"column":11},"end":{"row":56,"column":12},"action":"insert","lines":["p"]},{"start":{"row":56,"column":12},"end":{"row":56,"column":13},"action":"insert","lines":["e"]}],[{"start":{"row":56,"column":12},"end":{"row":56,"column":13},"action":"remove","lines":["e"],"id":46}],[{"start":{"row":56,"column":12},"end":{"row":56,"column":13},"action":"insert","lines":["M"],"id":47},{"start":{"row":56,"column":13},"end":{"row":56,"column":14},"action":"insert","lines":["e"]},{"start":{"row":56,"column":14},"end":{"row":56,"column":15},"action":"insert","lines":["s"]},{"start":{"row":56,"column":15},"end":{"row":56,"column":16},"action":"insert","lines":["s"]},{"start":{"row":56,"column":16},"end":{"row":56,"column":17},"action":"insert","lines":["a"]},{"start":{"row":56,"column":17},"end":{"row":56,"column":18},"action":"insert","lines":["g"]},{"start":{"row":56,"column":18},"end":{"row":56,"column":19},"action":"insert","lines":["e"]}],[{"start":{"row":56,"column":19},"end":{"row":56,"column":21},"action":"insert","lines":["()"],"id":48}],[{"start":{"row":56,"column":20},"end":{"row":56,"column":22},"action":"insert","lines":["\"\""],"id":49}],[{"start":{"row":56,"column":21},"end":{"row":56,"column":22},"action":"insert","lines":["J"],"id":50},{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"insert","lines":["o"]},{"start":{"row":56,"column":23},"end":{"row":56,"column":24},"action":"insert","lines":["h"]},{"start":{"row":56,"column":24},"end":{"row":56,"column":25},"action":"insert","lines":["n"]}],[{"start":{"row":56,"column":25},"end":{"row":56,"column":26},"action":"insert","lines":[" "],"id":51}],[{"start":{"row":56,"column":25},"end":{"row":56,"column":26},"action":"remove","lines":[" "],"id":52},{"start":{"row":56,"column":24},"end":{"row":56,"column":25},"action":"remove","lines":["n"]},{"start":{"row":56,"column":23},"end":{"row":56,"column":24},"action":"remove","lines":["h"]},{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"remove","lines":["o"]},{"start":{"row":56,"column":21},"end":{"row":56,"column":22},"action":"remove","lines":["J"]}],[{"start":{"row":56,"column":21},"end":{"row":56,"column":22},"action":"insert","lines":["K"],"id":53},{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"insert","lines":["P"]},{"start":{"row":56,"column":23},"end":{"row":56,"column":24},"action":"insert","lines":["Z"]}],[{"start":{"row":56,"column":24},"end":{"row":56,"column":25},"action":"insert","lines":["W"],"id":54},{"start":{"row":56,"column":25},"end":{"row":56,"column":26},"action":"insert","lines":["U"]},{"start":{"row":56,"column":26},"end":{"row":56,"column":27},"action":"insert","lines":["M"]}],[{"start":{"row":56,"column":28},"end":{"row":56,"column":29},"action":"insert","lines":[","],"id":55}],[{"start":{"row":56,"column":29},"end":{"row":56,"column":30},"action":"insert","lines":[" "],"id":56}],[{"start":{"row":56,"column":30},"end":{"row":56,"column":31},"action":"insert","lines":["-"],"id":57},{"start":{"row":56,"column":31},"end":{"row":56,"column":32},"action":"insert","lines":["2"]}],[{"start":{"row":56,"column":31},"end":{"row":56,"column":32},"action":"remove","lines":["2"],"id":58}],[{"start":{"row":56,"column":31},"end":{"row":56,"column":32},"action":"insert","lines":["4"],"id":59}],[{"start":{"row":56,"column":32},"end":{"row":56,"column":33},"action":"insert","lines":[" "],"id":60}],[{"start":{"row":56,"column":32},"end":{"row":56,"column":33},"action":"remove","lines":[" "],"id":61}],[{"start":{"row":56,"column":32},"end":{"row":56,"column":33},"action":"insert","lines":[","],"id":62}],[{"start":{"row":56,"column":33},"end":{"row":56,"column":34},"action":"insert","lines":[" "],"id":63}],[{"start":{"row":56,"column":34},"end":{"row":56,"column":36},"action":"insert","lines":["\"\""],"id":64}],[{"start":{"row":56,"column":35},"end":{"row":56,"column":61},"action":"insert","lines":["ABCDEFGHIJKLMNOPQRSTUVWXYZ"],"id":65}],[{"start":{"row":56,"column":61},"end":{"row":56,"column":87},"action":"insert","lines":["ABCDEFGHIJKLMNOPQRSTUVWXYZ"],"id":66}],[{"start":{"row":56,"column":12},"end":{"row":56,"column":13},"action":"insert","lines":["t"],"id":67}],[{"start":{"row":56,"column":0},"end":{"row":56,"column":91},"action":"remove","lines":["print(decryptMessage(\"KPZWUM\", -4, \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"))"],"id":68}],[{"start":{"row":39,"column":0},"end":{"row":39,"column":2},"action":"remove","lines":["# "],"id":69},{"start":{"row":40,"column":0},"end":{"row":40,"column":2},"action":"remove","lines":["# "]},{"start":{"row":41,"column":0},"end":{"row":41,"column":2},"action":"remove","lines":["# "]},{"start":{"row":42,"column":0},"end":{"row":42,"column":2},"action":"remove","lines":["# "]},{"start":{"row":43,"column":0},"end":{"row":43,"column":2},"action":"remove","lines":["# "]},{"start":{"row":44,"column":0},"end":{"row":44,"column":2},"action":"remove","lines":["# "]},{"start":{"row":45,"column":0},"end":{"row":45,"column":2},"action":"remove","lines":["# "]},{"start":{"row":46,"column":0},"end":{"row":46,"column":2},"action":"remove","lines":["# "]},{"start":{"row":47,"column":0},"end":{"row":47,"column":2},"action":"remove","lines":["# "]},{"start":{"row":48,"column":0},"end":{"row":48,"column":2},"action":"remove","lines":["# "]},{"start":{"row":49,"column":0},"end":{"row":49,"column":2},"action":"remove","lines":["# "]},{"start":{"row":50,"column":0},"end":{"row":50,"column":2},"action":"remove","lines":["# "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":2},"action":"remove","lines":["# "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":2},"action":"remove","lines":["# "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":2},"action":"remove","lines":["# "]},{"start":{"row":55,"column":0},"end":{"row":55,"column":2},"action":"remove","lines":["# "]}],[{"start":{"row":54,"column":0},"end":{"row":54,"column":2},"action":"insert","lines":["# "],"id":70}],[{"start":{"row":21,"column":0},"end":{"row":32,"column":27},"action":"remove","lines":["def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage"],"id":71},{"start":{"row":21,"column":0},"end":{"row":32,"column":27},"action":"insert","lines":["def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage"]}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #3","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, cipherKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()",""],"id":72},{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #3","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, cipherKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"]}],[{"start":{"row":37,"column":35},"end":{"row":37,"column":44},"action":"remove","lines":["cipherKey"],"id":73},{"start":{"row":37,"column":35},"end":{"row":37,"column":45},"action":"insert","lines":["decryptKey"]}]]},"ace":{"folds":[],"scrolltop":296.79998779296875,"scrollleft":0,"selection":{"start":{"row":37,"column":43},"end":{"row":37,"column":43},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"start","mode":"ace/mode/python"}},"timestamp":1688652195083,"hash":"1e5877ccda1f777987ccdb104790f9bd0b887819"}